{
  "address": "3EgB44qFrL2gZhi24oiw6kqV6YTdg1i8hdG9nNxHLUzK",
  "metadata": {
    "name": "zk_escrow_sol",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "ZK Escrow Solana Program"
  },
  "instructions": [
    {
      "name": "initialize",
      "docs": [
        "Initialize ZK verification program with payment validation config",
        "This creates the payment config PDA with expected payment details"
      ],
      "discriminator": [175, 175, 109, 31, 13, 152, 155, 237],
      "accounts": [
        {
          "name": "payment_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 97, 121, 109, 101, 110, 116, 95, 99, 111, 110, 102, 105,
                  103
                ]
              }
            ]
          }
        },
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "recipient_bank_account",
          "type": "string"
        },
        {
          "name": "allowed_amount",
          "type": "u64"
        },
        {
          "name": "fiat_currency",
          "type": "string"
        }
      ]
    },
    {
      "name": "mint_with_verified_proof",
      "docs": [
        "Two-Transaction Pattern: Step 2 - Mint NFT using verified proof result",
        "This transaction is small because it only checks PDA (no large proof data)",
        "The verification result PDA is reusable - can verify new proof and mint again"
      ],
      "discriminator": [232, 160, 147, 32, 63, 0, 35, 226],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "verification_result",
          "docs": ["Verification result PDA (reusable for multiple mints)"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              }
            ]
          }
        },
        {
          "name": "mint",
          "docs": ["New NFT mint"],
          "writable": true,
          "signer": true
        },
        {
          "name": "destination",
          "writable": true
        },
        {
          "name": "metadata",
          "writable": true
        },
        {
          "name": "master_edition",
          "writable": true
        },
        {
          "name": "mint_authority"
        },
        {
          "name": "collection_mint",
          "docs": ["Collection mint"],
          "writable": true
        },
        {
          "name": "collection_state",
          "docs": ["Collection state (price 정보 포함)"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 115, 116,
                  97, 116, 101
                ]
              },
              {
                "kind": "account",
                "path": "collection_mint"
              }
            ],
            "program": {
              "kind": "account",
              "path": "spl_nft_program"
            }
          }
        },
        {
          "name": "collection_metadata",
          "docs": ["Collection metadata (Metaplex)"],
          "writable": true
        },
        {
          "name": "collection_master_edition",
          "docs": ["Collection master edition"]
        },
        {
          "name": "sysvar_instruction",
          "docs": ["Sysvar instruction account"],
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "spl_nft_program",
          "address": "9fH1v7Pa2nUAgd3xbszA1bpSeH8NRL8iQVWuWUuWot3p"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "associated_token_program",
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "token_metadata_program"
        }
      ],
      "args": []
    },
    {
      "name": "verify_proof",
      "docs": [
        "Two-Transaction Pattern: Step 1 - Verify proof and store result in PDA",
        "This separates large proof verification from NFT minting to solve transaction size issues",
        "Each unique claim_identifier gets its own PDA, allowing multiple verifications per user"
      ],
      "discriminator": [217, 211, 191, 110, 144, 13, 186, 98],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "verification_result",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              }
            ]
          }
        },
        {
          "name": "payment_config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 97, 121, 109, 101, 110, 116, 95, 99, 111, 110, 102, 105,
                  103
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "proof",
          "type": {
            "defined": {
              "name": "Proof"
            }
          }
        },
        {
          "name": "expected_witnesses",
          "type": {
            "vec": "string"
          }
        },
        {
          "name": "required_threshold",
          "type": "u8"
        }
      ]
    },
    {
      "name": "verify_proof_only",
      "docs": ["This exposes the internal proof verification logic"],
      "discriminator": [91, 4, 171, 117, 80, 113, 185, 40],
      "accounts": [
        {
          "name": "signer",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "proof",
          "type": {
            "defined": {
              "name": "Proof"
            }
          }
        },
        {
          "name": "expected_witnesses",
          "type": {
            "vec": "string"
          }
        },
        {
          "name": "required_threshold",
          "type": "u8"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "CollectionState",
      "discriminator": [228, 135, 148, 4, 244, 41, 118, 165]
    },
    {
      "name": "PaymentConfig",
      "discriminator": [252, 166, 185, 239, 186, 79, 212, 152]
    },
    {
      "name": "VerificationResult",
      "discriminator": [104, 111, 80, 172, 219, 191, 162, 38]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "InvalidThreshold",
      "msg": "Invalid threshold"
    },
    {
      "code": 6001,
      "name": "InvalidSignature",
      "msg": "Invalid signature format"
    },
    {
      "code": 6002,
      "name": "InvalidRecoveryId",
      "msg": "Invalid recovery ID (must be 0 or 1)"
    },
    {
      "code": 6003,
      "name": "RecoveryFailed",
      "msg": "Failed to recover signer address"
    },
    {
      "code": 6004,
      "name": "AddressMismatch",
      "msg": "Recovered address does not match expected address"
    },
    {
      "code": 6005,
      "name": "IdentifierMismatch",
      "msg": "Claim identifier does not match expected value"
    },
    {
      "code": 6006,
      "name": "InvalidHex",
      "msg": "Failed to decode hex string"
    },
    {
      "code": 6007,
      "name": "InvalidBankAccount",
      "msg": "Invalid bank account"
    },
    {
      "code": 6008,
      "name": "InvalidAmount",
      "msg": "Amount must be greater than zero"
    },
    {
      "code": 6009,
      "name": "InvalidCurrency",
      "msg": "Invalid currency - only KRW supported"
    },
    {
      "code": 6010,
      "name": "RecipientMismatch",
      "msg": "Recipient bank account mismatch"
    },
    {
      "code": 6011,
      "name": "AmountMismatch",
      "msg": "Payment amount mismatch"
    },
    {
      "code": 6012,
      "name": "UnauthorizedUser",
      "msg": "Unauthorized: user does not own this verification result"
    },
    {
      "code": 6013,
      "name": "AlreadyUsed",
      "msg": "Verification result has already been used"
    },
    {
      "code": 6014,
      "name": "VerificationExpired",
      "msg": "Verification has expired (older than 5 minutes)"
    },
    {
      "code": 6015,
      "name": "NullifierAlreadyUsed",
      "msg": "Nullifier has already been used (replay attack prevented)"
    }
  ],
  "types": [
    {
      "name": "ClaimDataInput",
      "docs": [
        "Complete claim data with identifier, owner, timestamp, and epoch"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "identifier",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "timestamp_s",
            "type": "u32"
          },
          {
            "name": "epoch",
            "type": "u32"
          }
        ]
      }
    },
    {
      "name": "ClaimInfo",
      "docs": [
        "Claim information containing provider, parameters, and context"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "provider",
            "type": "string"
          },
          {
            "name": "parameters",
            "type": "string"
          },
          {
            "name": "context",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "CollectionState",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "collection_mint",
            "type": "pubkey"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "uri_prefix",
            "type": "string"
          },
          {
            "name": "collection_uri",
            "type": "string"
          },
          {
            "name": "counter",
            "type": "u64"
          },
          {
            "name": "price",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "PaymentConfig",
      "docs": ["Payment validation configuration"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "recipient_bank_account",
            "type": "string"
          },
          {
            "name": "allowed_amount",
            "type": "u64"
          },
          {
            "name": "fiat_currency",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Proof",
      "docs": ["Complete proof structure (zk-escrow compatible)"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "claim_info",
            "type": {
              "defined": {
                "name": "ClaimInfo"
              }
            }
          },
          {
            "name": "signed_claim",
            "type": {
              "defined": {
                "name": "SignedClaim"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SignedClaim",
      "docs": ["Signed claim containing claim data and signatures"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "claim",
            "type": {
              "defined": {
                "name": "ClaimDataInput"
              }
            }
          },
          {
            "name": "signatures",
            "type": {
              "vec": "bytes"
            }
          }
        ]
      }
    },
    {
      "name": "VerificationResult",
      "docs": [
        "Verification result stored in PDA after successful proof verification",
        "This allows splitting large proof verification from NFT minting"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user",
            "docs": ["User who verified the proof"],
            "type": "pubkey"
          },
          {
            "name": "verified_at",
            "docs": ["Timestamp when verification was completed"],
            "type": "i64"
          },
          {
            "name": "claim_identifier",
            "docs": ["Claim identifier from the verified proof"],
            "type": "string"
          },
          {
            "name": "is_used",
            "docs": ["Whether this verification has been used for minting"],
            "type": "bool"
          }
        ]
      }
    }
  ]
}
